// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
users (username, password, full_name) 
values ($1, $2, $3)
RETURNING id, username, password, full_name, created_at
`

type CreateUserParams struct {
	Username string `db:"username"`
	Password string `db:"password"`
	FullName string `db:"full_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.FullName)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :one
DELETE FROM users
WHERE id = $1
RETURNING id, username, password, full_name, created_at
`

func (q *Queries) Delete(ctx context.Context, id int32) (Users, error) {
	row := q.db.QueryRowContext(ctx, delete, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAll = `-- name: DeleteAll :many
DELETE FROM users
RETURNING id, username, password, full_name, created_at
`

func (q *Queries) DeleteAll(ctx context.Context) ([]Users, error) {
	rows, err := q.db.QueryContext(ctx, deleteAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Users
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.FullName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, full_name, created_at FROM users
WHERE username= $1 and  password= $2
`

type GetUserParams struct {
	Username string `db:"username"`
	Password string `db:"password"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.Username, arg.Password)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, full_name, created_at FROM users
WHERE id= $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password, full_name, created_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]Users, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Users
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.FullName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE users
SET username = $1, password = $2, full_name = $3
WHERE id = $4
RETURNING id, username, password, full_name, created_at
`

type UpdateParams struct {
	Username string `db:"username"`
	Password string `db:"password"`
	FullName string `db:"full_name"`
	ID       int32  `db:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, update,
		arg.Username,
		arg.Password,
		arg.FullName,
		arg.ID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}
