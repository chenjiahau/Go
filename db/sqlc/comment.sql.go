// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comment.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments
(entry_id, user_id, content)
values ($1, $2, $3)
RETURNING id, entry_id, user_id, content, created_at
`

type CreateCommentParams struct {
	EntryID sql.NullInt32  `db:"entry_id"`
	UserID  sql.NullInt32  `db:"user_id"`
	Content sql.NullString `db:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comments, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.EntryID, arg.UserID, arg.Content)
	var i Comments
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :one
DELETE FROM comments
WHERE id = $1
RETURNING id, entry_id, user_id, content, created_at
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) (Comments, error) {
	row := q.db.QueryRowContext(ctx, deleteComment, id)
	var i Comments
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
SELECT id, entry_id, user_id, content, created_at FROM comments
WHERE id= $1
`

func (q *Queries) GetComment(ctx context.Context, id int32) (Comments, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comments
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT id, entry_id, user_id, content, created_at FROM comments
`

func (q *Queries) GetComments(ctx context.Context) ([]Comments, error) {
	rows, err := q.db.QueryContext(ctx, getComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comments
	for rows.Next() {
		var i Comments
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $1
WHERE id = $2
RETURNING id, entry_id, user_id, content, created_at
`

type UpdateCommentParams struct {
	Content sql.NullString `db:"content"`
	ID      int32          `db:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comments, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.Content, arg.ID)
	var i Comments
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
